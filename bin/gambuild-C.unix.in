#! /bin/sh

# The following settings are determined by the configure script.

C_COMPILER=@C_COMPILER_SH@
C_PREPROC=@C_PREPROC_SH@
PKG_CONFIG=@PKG_CONFIG_SH@

FLAGS_OBJ=@FLAGS_OBJ_SH@
FLAGS_DYN=@FLAGS_DYN_SH@
FLAGS_LIB=@FLAGS_LIB_SH@
FLAGS_EXE=@FLAGS_EXE_SH@

FLAGS_OPT=@FLAGS_OPT_SH@
FLAGS_OPT_RTS=@FLAGS_OPT_RTS_SH@

DEFS_OBJ=@DEFS_OBJ_SH@
DEFS_DYN=@DEFS_DYN_SH@
DEFS_LIB=@DEFS_LIB_SH@
DEFS_EXE=@DEFS_EXE_SH@

BUILD_OBJ=@BUILD_OBJ_SH@
BUILD_DYN=@BUILD_DYN_SH@
BUILD_LIB=@BUILD_LIB_SH@
BUILD_EXE=@BUILD_EXE_SH@

DEFS=@DEFS_SH@
LIBS=@LIBS_SH@
GAMBITLIB=@GAMBITLIB_SH@
GAMBITGSCLIB=@GAMBITGSCLIB_SH@
GAMBITGSILIB=@GAMBITGSILIB_SH@
LIB_PREFIX=@LIB_PREFIX_SH@
LIB_EXTENSION=@LIB_EXTENSION_SH@
OBJ_EXTENSION=@OBJ_EXTENSION_SH@
EXE_EXTENSION=@EXE_EXTENSION_SH@
BAT_EXTENSION=@BAT_EXTENSION_SH@

GAMBUILD_CC_OPTIONS_REGEXP="^ #|\\*/\"\\*/\"cc-options|#"
GAMBUILD_LD_OPTIONS_PRELUDE_REGEXP="^ #|\\*/\"\\*/\"ld-options-prelude|#"
GAMBUILD_LD_OPTIONS_REGEXP="^ #|\\*/\"\\*/\"ld-options|#"
GAMBUILD_PKG_CONFIG_REGEXP="^ #|\\*/\"\\*/\"pkg-config|#"
GAMBUILD_PKG_CONFIG_PATH_REGEXP="^ #|\\*/\"\\*/\"pkg-config-path|#"

GAMBUILD_SPACE=' '
GAMBUILD_NL='
'

shell_string_encode()
{
  printf "%s" "$1" | sed "s,','\\\\'',g;s,^,',;s,\$,'," ;
}

shell_quote()
{
  RESULT=""
  for arg in $1 ; do
    if test -z "$RESULT" ; then
      RESULT="$(shell_string_encode ${arg})"
    else
      RESULT="${RESULT} $(shell_string_encode ${arg})"
    fi
  done
  printf "%s" "${RESULT}"
}

sed_quote()
{
  # see: https://stackoverflow.com/questions/29613304/is-it-possible-to-escape-regex-metacharacters-reliably-with-sed
  printf "%s" "$1" | sed 's/[&/\]/\\&/g'
}

get_meta_info()
{
  grep "$2\(\"\|(when unix \"\)" "$1" | sed -e "s,$2\((when unix \)\{0\,1\}\",,g" -e "s,\")\{0\,1\}\$,,g" -e "s,\\\\\\\",\\\",g" -e "s,\\\\\\\\,,g" -e "s,\\\\t,	,g" -e "s,\\\\v,,g" -e "s,\\\\f,,g" -e "s,,\\\\,g"
}

get_meta_info_list()
{
  GAMBUILD_META_INFO_LIST=""
  for info in $(get_meta_info "$1" "$2"); do
    GAMBUILD_META_INFO_LIST="${GAMBUILD_META_INFO_LIST}$(shell_quote ${info}) "
  done
}

process_pkg_config()
{
  for arg in $1; do
    if test -z "${PKG_CONFIG}"; then
      printf "%s\n" "*** WARNING -- the pkg-config program is unavailable but is needed to get C compiler options using 'pkg-config --cflags $arg' and 'pkg-config --libs $arg'"
      exit 1
    else
      set -e
      GAMBUILD_CFLAGS="$(${PKG_CONFIG} --cflags $arg)"
      accumulate_cc_options "${GAMBUILD_CFLAGS}" "${GAMBUILD_SPACE}"
      GAMBUILD_LIBS="$(${PKG_CONFIG} --libs $arg)"
      accumulate_ld_options "${GAMBUILD_LIBS}" "${GAMBUILD_SPACE}"
      set +e
    fi
  done
}

accumulate_cc_options()
{
  GAMBUILD_SAVE_IFS2="$IFS"
  IFS="$2"
  for flag in $1 ; do
    GAMBUILD_CC_OPTIONS="${GAMBUILD_CC_OPTIONS}$(shell_quote $flag) "
  done
  IFS="${GAMBUILD_SAVE_IFS2}"
}

accumulate_ld_options_prelude()
{
  GAMBUILD_SAVE_IFS2="$IFS"
  IFS="$2"
  for flag in $1 ; do
    GAMBUILD_LD_OPTIONS_PRELUDE="${GAMBUILD_LD_OPTIONS_PRELUDE}$(shell_quote $flag) "
  done
  IFS="${GAMBUILD_SAVE_IFS2}"
}

accumulate_ld_options()
{
  GAMBUILD_SAVE_IFS2="$IFS"
  IFS="$2"
  for flag in $1 ; do
    GAMBUILD_LD_OPTIONS="${GAMBUILD_LD_OPTIONS}$(shell_quote $flag) "
  done
  IFS="${GAMBUILD_SAVE_IFS2}"
}

process_pkg_config_path()
{
  for path in $1; do
    if test -z "${GAMBUILD_PKG_CONFIG_PATH}"; then
      GAMBUILD_PKG_CONFIG_PATH="$path"
    else
      # prepend path so that last path added has priority
      GAMBUILD_PKG_CONFIG_PATH="$path:${GAMBUILD_PKG_CONFIG_PATH}"
    fi
  done
}

extract_cc_ld_options()
{
  GAMBUILD_CC_OPTIONS=""
  GAMBUILD_LD_OPTIONS_PRELUDE=""
  GAMBUILD_LD_OPTIONS=""
  GAMBUILD_PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"

  GAMBUILD_SAVE_IFS="$IFS"
  IFS="${GAMBUILD_NL}"

  if test ! -z "$1"; then
    process_pkg_config_path "$(get_meta_info "$1" "${GAMBUILD_PKG_CONFIG_PATH_REGEXP}")"
  fi

  process_pkg_config_path "$3"

  export PKG_CONFIG_PATH="${GAMBUILD_PKG_CONFIG_PATH}"

  if test ! -z "$1"; then
    process_pkg_config "$(get_meta_info "$1" "${GAMBUILD_PKG_CONFIG_REGEXP}")"
  fi

  process_pkg_config "$2"

  for file in $1; do

    get_meta_info_list "$file" "${GAMBUILD_CC_OPTIONS_REGEXP}"
    GAMBUILD_CC_OPTIONS="${GAMBUILD_CC_OPTIONS}${GAMBUILD_META_INFO_LIST}"

    get_meta_info_list "$file" "${GAMBUILD_LD_OPTIONS_PRELUDE_REGEXP}"
    GAMBUILD_LD_OPTIONS_PRELUDE="${GAMBUILD_LD_OPTIONS_PRELUDE}${GAMBUILD_META_INFO_LIST}"

    get_meta_info_list "$file" "${GAMBUILD_LD_OPTIONS_REGEXP}"
    GAMBUILD_LD_OPTIONS="${GAMBUILD_LD_OPTIONS}${GAMBUILD_META_INFO_LIST}"

  done

  accumulate_cc_options "$4" "${GAMBUILD_NL}"
  accumulate_ld_options_prelude "$5" "${GAMBUILD_NL}"
  accumulate_ld_options "$6" "${GAMBUILD_NL}"

  IFS="${GAMBUILD_SAVE_IFS}"
}

substitute_common()
{
  printf "%s" "$1" | sed \
    -e "s\${C_COMPILER}$(sed_quote "${C_COMPILER}")g" \
    -e "s\${C_PREPROC}$(sed_quote "${C_PREPROC}")g" \
    -e "s\${PKG_CONFIG}$(sed_quote "${PKG_CONFIG}")g" \
    -e "s\${GAMBITDIR_INCLUDE}$(sed_quote "${GAMBITDIR_INCLUDE}")g" \
    -e "s\${GAMBITDIR_LIB}$(sed_quote "${GAMBITDIR_LIB}")g" \
    -e "s\${DEFS_DYN}$(sed_quote "$(shell_quote "${DEFS_DYN}")")g" \
    -e "s\${DEFS_EXE}$(sed_quote "$(shell_quote "${DEFS_EXE}")")g" \
    -e "s\${DEFS_OBJ}$(sed_quote "$(shell_quote "${DEFS_OBJ}")")g" \
    -e "s\${FLAGS_DYN}$(sed_quote "$(shell_quote "${FLAGS_DYN}")")g" \
    -e "s\${FLAGS_EXE}$(sed_quote "$(shell_quote "${FLAGS_EXE}")")g" \
    -e "s\${FLAGS_OBJ}$(sed_quote "$(shell_quote "${FLAGS_OBJ}")")g" \
    -e "s\${FLAGS_OPT}$(sed_quote "$(shell_quote "${FLAGS_OPT}")")g" \
    -e "s\${LIBS}$(sed_quote "$(shell_quote "${LIBS}")")g"
}

substitute_obj()
{
  printf "%s" "$(substitute_common "$1")" | sed \
    -e "s\${BUILD_OBJ_CC_OPTIONS_PARAM}$(sed_quote "${BUILD_OBJ_CC_OPTIONS_PARAM}")g" \
    -e "s\${BUILD_OBJ_INPUT_FILENAMES_PARAM}$(sed_quote "$(shell_quote "${BUILD_OBJ_INPUT_FILENAMES_PARAM}")")g" \
    -e "s\${BUILD_OBJ_OUTPUT_FILENAME_PARAM}$(sed_quote "$(shell_quote "${BUILD_OBJ_OUTPUT_FILENAME_PARAM}")")g"
}

substitute_dyn()
{
  printf "%s" "$(substitute_common "$1")" | sed \
    -e "s\${BUILD_DYN_CC_OPTIONS_PARAM}$(sed_quote "${BUILD_DYN_CC_OPTIONS_PARAM}")g" \
    -e "s\${BUILD_DYN_LD_OPTIONS_PRELUDE_PARAM}$(sed_quote "${BUILD_DYN_LD_OPTIONS_PRELUDE_PARAM}")g" \
    -e "s\${BUILD_DYN_LD_OPTIONS_PARAM}$(sed_quote "${BUILD_DYN_LD_OPTIONS_PARAM}")g" \
    -e "s\${BUILD_DYN_INPUT_FILENAMES_PARAM}$(sed_quote "$(shell_quote "${BUILD_DYN_INPUT_FILENAMES_PARAM}")")g" \
    -e "s\${BUILD_DYN_OUTPUT_FILENAME_PARAM}$(sed_quote "$(shell_quote "${BUILD_DYN_OUTPUT_FILENAME_PARAM}")")g"
}

substitute_exe()
{
  printf "%s" "$(substitute_common "$1")" | sed \
    -e "s\${BUILD_EXE_CC_OPTIONS_PARAM}$(sed_quote "${BUILD_EXE_CC_OPTIONS_PARAM}")g" \
    -e "s\${BUILD_EXE_LD_OPTIONS_PRELUDE_PARAM}$(sed_quote "${BUILD_EXE_LD_OPTIONS_PRELUDE_PARAM}")g" \
    -e "s\${BUILD_EXE_LD_OPTIONS_PARAM}$(sed_quote "${BUILD_EXE_LD_OPTIONS_PARAM}")g" \
    -e "s\${BUILD_EXE_INPUT_FILENAMES_PARAM}$(sed_quote "$(shell_quote "${BUILD_EXE_INPUT_FILENAMES_PARAM}")")g" \
    -e "s\${BUILD_EXE_OUTPUT_FILENAME_PARAM}$(sed_quote "$(shell_quote "${BUILD_EXE_OUTPUT_FILENAME_PARAM}")")g"
}

case "$1" in

  "obj")

    extract_cc_ld_options "${BUILD_OBJ_META_INFO_FILE_PARAM}" "${BUILD_OBJ_PKG_CONFIG_PARAM}" "${BUILD_OBJ_PKG_CONFIG_PATH_PARAM}" "${BUILD_OBJ_CC_OPTIONS_PARAM}" "${BUILD_OBJ_LD_OPTIONS_PRELUDE_PARAM}" "${BUILD_OBJ_LD_OPTIONS_PARAM}"

    BUILD_OBJ_CC_OPTIONS_PARAM="${GAMBUILD_CC_OPTIONS}"

    BUILD_OBJ_CMD="$(substitute_obj "$BUILD_OBJ")"

    if test ! -z "${GAMBUILD_VERBOSE}"; then
      printf "%s\n" "${BUILD_OBJ_CMD}"
    fi

    eval "${BUILD_OBJ_CMD}"
    ;;

  "dyn")

    extract_cc_ld_options "${BUILD_DYN_META_INFO_FILE_PARAM}" "${BUILD_DYN_PKG_CONFIG_PARAM}" "${BUILD_DYN_PKG_CONFIG_PATH_PARAM}" "${BUILD_DYN_CC_OPTIONS_PARAM}" "${BUILD_DYN_LD_OPTIONS_PRELUDE_PARAM}" "${BUILD_DYN_LD_OPTIONS_PARAM}"

    BUILD_DYN_CC_OPTIONS_PARAM="${GAMBUILD_CC_OPTIONS}"
    BUILD_DYN_LD_OPTIONS_PRELUDE_PARAM="${GAMBUILD_LD_OPTIONS_PRELUDE}"
    BUILD_DYN_LD_OPTIONS_PARAM="${GAMBUILD_LD_OPTIONS}"

    BUILD_DYN_CMD="$(substitute_dyn "$BUILD_DYN")"

    if test ! -z "${GAMBUILD_VERBOSE}"; then
      printf "%s\n" "${BUILD_DYN_CMD}"
    fi

    eval "${BUILD_DYN_CMD}"
    ;;

  "lib")

    BUILD_LIB_CMD="$BUILD_LIB"

    if test ! -z "${GAMBUILD_VERBOSE}"; then
      printf "%s\n" "${BUILD_LIB_CMD}"
    fi

    eval "${BUILD_LIB_CMD}"
    ;;

  "exe")

    extract_cc_ld_options "${BUILD_EXE_META_INFO_FILE_PARAM}" "${BUILD_EXE_PKG_CONFIG_PARAM}" "${BUILD_EXE_PKG_CONFIG_PATH_PARAM}" "${BUILD_EXE_CC_OPTIONS_PARAM}" "${BUILD_EXE_LD_OPTIONS_PRELUDE_PARAM}" "${BUILD_EXE_LD_OPTIONS_PARAM}"

    BUILD_EXE_CC_OPTIONS_PARAM="${GAMBUILD_CC_OPTIONS}"
    BUILD_EXE_LD_OPTIONS_PRELUDE_PARAM="${GAMBUILD_LD_OPTIONS_PRELUDE}"
    BUILD_EXE_LD_OPTIONS_PARAM="${GAMBUILD_LD_OPTIONS}"

    BUILD_EXE_CMD="$(substitute_exe "$BUILD_EXE")"

    if test ! -z "${GAMBUILD_VERBOSE}"; then
      printf "%s\n" "${BUILD_EXE_CMD}"
    fi

    eval "${BUILD_EXE_CMD}"
    ;;

  "C_COMPILER")
    printf "%s\n" "${C_COMPILER}"
    ;;

  "C_PREPROC")
    printf "%s\n" "${C_PREPROC}"
    ;;

  "PKG_CONFIG")
    printf "%s\n" "${PKG_CONFIG}"
    ;;

  "FLAGS_OBJ")
    printf "%s\n" "${FLAGS_OBJ}"
    ;;

  "FLAGS_DYN")
    printf "%s\n" "${FLAGS_DYN}"
    ;;

  "FLAGS_LIB")
    printf "%s\n" "${FLAGS_LIB}"
    ;;

  "FLAGS_EXE")
    printf "%s\n" "${FLAGS_EXE}"
    ;;

  "FLAGS_OPT")
    printf "%s\n" "${FLAGS_OPT}"
    ;;

  "FLAGS_OPT_RTS")
    printf "%s\n" "${FLAGS_OPT_RTS}"
    ;;

  "DEFS_OBJ")
    printf "%s\n" "${DEFS_OBJ}"
    ;;

  "DEFS_DYN")
    printf "%s\n" "${DEFS_DYN}"
    ;;

  "DEFS_LIB")
    printf "%s\n" "${DEFS_LIB}"
    ;;

  "DEFS_EXE")
    printf "%s\n" "${DEFS_EXE}"
    ;;

  "BUILD_OBJ")
    printf "%s\n" "${BUILD_OBJ}"
    ;;

  "BUILD_DYN")
    printf "%s\n" "${BUILD_DYN}"
    ;;

  "BUILD_LIB")
    printf "%s\n" "${BUILD_LIB}"
    ;;

  "BUILD_EXE")
    printf "%s\n" "${BUILD_EXE}"
    ;;

  "DEFS")
    printf "%s\n" "${DEFS}"
    ;;

  "LIBS")
    printf "%s\n" "${LIBS}"
    ;;

  "GAMBITLIB")
    printf "%s\n" "${GAMBITLIB}"
    ;;

  "GAMBITGSCLIB")
    printf "%s\n" "${GAMBITGSCLIB}"
    ;;

  "GAMBITGSILIB")
    printf "%s\n" "${GAMBITGSILIB}"
    ;;

  "LIB_PREFIX")
    printf "%s\n" "${LIB_PREFIX}"
    ;;

  "LIB_EXTENSION")
    printf "%s\n" "${LIB_EXTENSION}"
    ;;

  "OBJ_EXTENSION")
    printf "%s\n" "${OBJ_EXTENSION}"
    ;;

  "EXE_EXTENSION")
    printf "%s\n" "${EXE_EXTENSION}"
    ;;

  "BAT_EXTENSION")
    printf "%s\n" "${BAT_EXTENSION}"
    ;;

  "")
    # Dump configure script settings

    ESC_SH="sed -e s/\\\\/\\\\\\\\\\\\\\\\/g -e s/\\\"/\\\\\\\"/g -e s/\\\$/\\\\\\\$/g -e s/^/\"/ -e s/$/\"/"

    echo C_COMPILER=`echo "${C_COMPILER}" | ${ESC_SH}`
    echo C_PREPROC=`echo "${C_PREPROC}" | ${ESC_SH}`
    echo PKG_CONFIG=`echo "${PKG_CONFIG}" | ${ESC_SH}`

    echo FLAGS_OBJ=`echo "${FLAGS_OBJ}" | ${ESC_SH}`
    echo FLAGS_DYN=`echo "${FLAGS_DYN}" | ${ESC_SH}`
    echo FLAGS_LIB=`echo "${FLAGS_LIB}" | ${ESC_SH}`
    echo FLAGS_EXE=`echo "${FLAGS_EXE}" | ${ESC_SH}`

    echo FLAGS_OPT=`echo "${FLAGS_OPT}" | ${ESC_SH}`
    echo FLAGS_OPT_RTS=`echo "${FLAGS_OPT_RTS}" | ${ESC_SH}`

    echo DEFS_OBJ=`echo "${DEFS_OBJ}" | ${ESC_SH}`
    echo DEFS_DYN=`echo "${DEFS_DYN}" | ${ESC_SH}`
    echo DEFS_LIB=`echo "${DEFS_LIB}" | ${ESC_SH}`
    echo DEFS_EXE=`echo "${DEFS_EXE}" | ${ESC_SH}`

    echo BUILD_OBJ=`echo "${BUILD_OBJ}" | ${ESC_SH}`
    echo BUILD_DYN=`echo "${BUILD_DYN}" | ${ESC_SH}`
    echo BUILD_LIB=`echo "${BUILD_LIB}" | ${ESC_SH}`
    echo BUILD_EXE=`echo "${BUILD_EXE}" | ${ESC_SH}`

    echo DEFS=`echo "${DEFS}" | ${ESC_SH}`
    echo LIBS=`echo "${LIBS}" | ${ESC_SH}`
    echo GAMBITLIB=`echo "${GAMBITLIB}" | ${ESC_SH}`
    echo GAMBITGSCLIB=`echo "${GAMBITGSCLIB}" | ${ESC_SH}`
    echo GAMBITGSILIB=`echo "${GAMBITGSILIB}" | ${ESC_SH}`
    echo LIB_PREFIX=`echo "${LIB_PREFIX}" | ${ESC_SH}`
    echo LIB_EXTENSION=`echo "${LIB_EXTENSION}" | ${ESC_SH}`
    echo OBJ_EXTENSION=`echo "${OBJ_EXTENSION}" | ${ESC_SH}`
    echo EXE_EXTENSION=`echo "${EXE_EXTENSION}" | ${ESC_SH}`
    echo BAT_EXTENSION=`echo "${BAT_EXTENSION}" | ${ESC_SH}`
    ;;

  *)
    echo "gambcomp-C unknown operation \"$1\""
    exit 1
    ;;

esac
