(include "#.scm")

(define bool #f)

(define z0  (list))
(define z1  (list 100))
(define z2  (list 100 101))
(define z3  (list 100 101 102))
(define z4  (list 100 101 102 103))
(define z5  (list 100 101 102 103 104))
(define z6  (list 100 101 102 103 104 105))
(define z7  (list 100 101 102 103 104 105 106))
(define z8  (list 100 101 102 103 104 105 106 107))
(define z9  (list 100 101 102 103 104 105 106 107 108))
(define z10 (list 100 101 102 103 104 105 106 107 108 109))

(check-tail-exn type-exception? (lambda () (fifth z0)))
(check-tail-exn type-exception? (lambda () (fifth z1)))
(check-tail-exn type-exception? (lambda () (fifth z2)))
(check-tail-exn type-exception? (lambda () (fifth z3)))
(check-tail-exn type-exception? (lambda () (fifth z4)))
(check-equal? (fifth z5) 104 )
(check-equal? (fifth z6) 104 )
(check-equal? (fifth z7) 104 )
(check-equal? (fifth z8) 104 )
(check-equal? (fifth z9) 104 )
(check-equal? (fifth z10) 104 )
(check-tail-exn type-exception? (lambda () (fifth bool)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (fifth)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (fifth z10 z10)))
