(include "#.scm")

(define bool #f)

(define z0  (list))
(define z1  (list 100))
(define z2  (list 100 101))
(define z3  (list 100 101 102))
(define z4  (list 100 101 102 103))
(define z5  (list 100 101 102 103 104))
(define z6  (list 100 101 102 103 104 105))
(define z7  (list 100 101 102 103 104 105 106))
(define z8  (list 100 101 102 103 104 105 106 107))
(define z9  (list 100 101 102 103 104 105 106 107 108))
(define z10 (list 100 101 102 103 104 105 106 107 108 109))

(check-tail-exn type-exception? (lambda () (sixth z0)))
(check-tail-exn type-exception? (lambda () (sixth z1)))
(check-tail-exn type-exception? (lambda () (sixth z2)))
(check-tail-exn type-exception? (lambda () (sixth z3)))
(check-tail-exn type-exception? (lambda () (sixth z4)))
(check-tail-exn type-exception? (lambda () (sixth z5)))
(check-equal? (sixth z6) 105 )
(check-equal? (sixth z7) 105 )
(check-equal? (sixth z8) 105 )
(check-equal? (sixth z9) 105 )
(check-equal? (sixth z10) 105 )
(check-tail-exn type-exception? (lambda () (sixth bool)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (sixth)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (sixth z10 z10)))
