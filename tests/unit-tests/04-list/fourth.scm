(include "#.scm")

(define bool #f)

(define z0  (list))
(define z1  (list 100))
(define z2  (list 100 101))
(define z3  (list 100 101 102))
(define z4  (list 100 101 102 103))
(define z5  (list 100 101 102 103 104))
(define z6  (list 100 101 102 103 104 105))
(define z7  (list 100 101 102 103 104 105 106))
(define z8  (list 100 101 102 103 104 105 106 107))
(define z9  (list 100 101 102 103 104 105 106 107 108))
(define z10 (list 100 101 102 103 104 105 106 107 108 109))

(check-tail-exn type-exception? (lambda () (fourth z0)))
(check-tail-exn type-exception? (lambda () (fourth z1)))
(check-tail-exn type-exception? (lambda () (fourth z2)))
(check-tail-exn type-exception? (lambda () (fourth z3)))
(check-equal? (fourth z4) 103 )
(check-equal? (fourth z5) 103 )
(check-equal? (fourth z6) 103 )
(check-equal? (fourth z7) 103 )
(check-equal? (fourth z8) 103 )
(check-equal? (fourth z9) 103 )
(check-equal? (fourth z10) 103 )
(check-tail-exn type-exception? (lambda () (fourth bool)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (fourth)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (fourth z10 z10)))
