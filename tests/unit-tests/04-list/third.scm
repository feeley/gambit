(include "#.scm")

(define bool #f)

(define z0  (list))
(define z1  (list 100))
(define z2  (list 100 101))
(define z3  (list 100 101 102))
(define z4  (list 100 101 102 103))
(define z5  (list 100 101 102 103 104))
(define z6  (list 100 101 102 103 104 105))
(define z7  (list 100 101 102 103 104 105 106))
(define z8  (list 100 101 102 103 104 105 106 107))
(define z9  (list 100 101 102 103 104 105 106 107 108))
(define z10 (list 100 101 102 103 104 105 106 107 108 109))

(check-tail-exn type-exception? (lambda () (third z0)))
(check-tail-exn type-exception? (lambda () (third z1)))
(check-tail-exn type-exception? (lambda () (third z2)))
(check-equal? (third z3) 102 )
(check-equal? (third z4) 102 )
(check-equal? (third z5) 102 )
(check-equal? (third z6) 102 )
(check-equal? (third z7) 102 )
(check-equal? (third z8) 102 )
(check-equal? (third z9) 102 )
(check-equal? (third z10) 102 )
(check-tail-exn type-exception? (lambda () (third bool)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (third)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (third z10 z10)))
