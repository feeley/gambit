(include "#.scm")

(define bool #f)

(define z0  (list))
(define z1  (list 100))
(define z2  (list 100 101))
(define z3  (list 100 101 102))
(define z4  (list 100 101 102 103))
(define z5  (list 100 101 102 103 104))
(define z6  (list 100 101 102 103 104 105))
(define z7  (list 100 101 102 103 104 105 106))
(define z8  (list 100 101 102 103 104 105 106 107))
(define z9  (list 100 101 102 103 104 105 106 107 108))
(define z10 (list 100 101 102 103 104 105 106 107 108 109))

(check-tail-exn type-exception? (lambda () (seventh z0)))
(check-tail-exn type-exception? (lambda () (seventh z1)))
(check-tail-exn type-exception? (lambda () (seventh z2)))
(check-tail-exn type-exception? (lambda () (seventh z3)))
(check-tail-exn type-exception? (lambda () (seventh z4)))
(check-tail-exn type-exception? (lambda () (seventh z5)))
(check-tail-exn type-exception? (lambda () (seventh z6)))
(check-equal? (seventh z7) 106 )
(check-equal? (seventh z8) 106 )
(check-equal? (seventh z9) 106 )
(check-equal? (seventh z10) 106 )
(check-tail-exn type-exception? (lambda () (seventh bool)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (seventh)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (seventh z10 z10)))
